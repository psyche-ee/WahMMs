<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wahing Medical Clinic</title>
    <link rel="icon" type="image/png" href="<?= baseurl()?>/public/assets/wahing_logo.png">
    <link rel="stylesheet" href="<?= baseurl()?>/public/styles/All.css">
    <link rel="stylesheet" href="<?= baseurl()?>/public/styles/Services.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
</head>
<body>
    <?php require __DIR__ . '/../common/header.php'; ?>

    <section>
        <div class="scroll-wrapper">
            <button id="scrollLeft" class="nav prev"><i class="fa-solid fa-angle-left"></i></button>
            <div class="scroll-container">
            <?php foreach ($services as $service): ?>
                <div class="box">
                    <div class="card-inner">
                        <div class="box-front">
                            <?php
                                $img = $service['image_path'] ? htmlspecialchars($service['image_path']) : 'default_service.png';
                            ?>
                            <div class="img" style="background-image: url('<?= baseurl() ?>/public/uploads/<?= htmlspecialchars($service['image_path']) ?>'); background-size: cover; background-position: center;"></div>
                            <h3><?= htmlspecialchars($service['name']) ?></h3>
                            <p><?= htmlspecialchars($service['description']) ?></p>
                        </div>
                        <div class="box-back">
                            <p><?= htmlspecialchars($service['long_description']) ?></p>
                            <p><strong>â‚±<?= number_format($service['price'], 2) ?></strong></p>
                            <button class="book-btn"
                                data-service="<?= htmlspecialchars($service['name']) ?>"
                                data-service-id="<?= htmlspecialchars($service['id']) ?>"
                            >Book</button>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>
            </div>
            <button id="scrollRight" class="nav next"><i class="fa-solid fa-angle-right"></i></button>
            <div class="dot-container">
                <!-- Dots will be generated by JavaScript -->
            </div>
        </div>
        <dialog class="bookmodal" id="bookmodal">
            <h1 id="modal-title"></h1>
            <form id="book-appointment-form" method="POST" action="<?= baseurl() ?>/pages/bookservices">
                <input type="hidden" name="service-id" id="selected-service-id">
                <input type="hidden" name="service-name" id="selected-service-name">
                <label for="date">Date:</label>
                <input type="date" id="date" name="date" required>

                <label for="time">Time:</label>
                
                <select name="time" id="time">
                    <option value="18:00:00">6:00 pm</option>
                    <option value="18:30:00">6:30 pm</option>
                    <option value="19:00:00">7:00 pm</option>
                    <option value="19:30:00">7:30 pm</option>
                    <option value="20:00:00">8:00 pm</option>
                    <option value="20:30:00">8:30 pm</option>
                    <option value="21:00:00">9:00 pm</option>
                </select>

                <div>
                    <button type="submit" id="book">Book</button>
                    <button type="button" id="cancel-button">Cancel</button>
                </div>
            </form>
        </dialog>

        <dialog id="confirmation-modal">
            <div>
                <p id="confirmation-message"></p>
                <button class="ok" onclick="document.getElementById('confirmation-modal').close()">OK</button>
            </div>
        </dialog>

    </section>
</body>
</html>

<script>
    const scrollContainer = document.querySelector(".scroll-container");
    const scrollLeft = document.getElementById("scrollLeft");
    const scrollRight = document.getElementById("scrollRight");
    const boxes = document.querySelectorAll(".box");
    const dotContainer = document.querySelector(".dot-container");
    const modalTitle = document.getElementById("modal-title");


    const boxWidth = 420;
    const gap = 50;
    const scrollAmount = boxWidth + gap;

    const itemsPerView = Math.max(1, Math.floor(scrollContainer.offsetWidth / scrollAmount));
    const totalDots = (Math.ceil(boxes.length / itemsPerView)) - 1;
    let currentIndex = 0;

    // Dynamically generate dot elements
    for (let i = 0; i < totalDots; i++) {
        const dot = document.createElement("span");
        dot.classList.add("dot");
        if (i === currentIndex) dot.classList.add("active");
        dotContainer.appendChild(dot);
    }

    // Get the generated dots
    const dots = document.querySelectorAll(".dot");

    function updateDots() {
        dots.forEach((dot, i) => {
            dot.classList.toggle("active", i === currentIndex);
        });
        updateNavVisibility();
    }

    function updateNavVisibility() {
        scrollLeft.style.display = currentIndex === 0 ? "none" : "block";
        scrollRight.style.display = currentIndex === totalDots - 1 ? "none" : "block";
    }

    scrollRight.addEventListener("click", () => {
        if (currentIndex < totalDots - 1) {
            currentIndex++;
            scrollContainer.scrollBy({ left: scrollAmount * itemsPerView, behavior: "smooth" });
            updateDots();
        }
    });

    scrollLeft.addEventListener("click", () => {
        if (currentIndex > 0) {
            currentIndex--;
            scrollContainer.scrollBy({ left: -scrollAmount * itemsPerView, behavior: "smooth" });
            updateDots();
        }
    });

    dots.forEach((dot, index) => {
        dot.addEventListener("click", () => {
            currentIndex = index;
            scrollContainer.scrollTo({ left: scrollAmount * itemsPerView * index, behavior: "smooth" });
            updateDots();
        });
    });

    // This variable is passed from PHP and reflects the login state

    const isLoggedIn = <?= json_encode($loggedIn) ?>;
    // const modalTitle = document.getElementById("modal-title");

    <?php if (!empty($result)): ?>
        const status = <?= json_encode($result) ?>;
        const modal = document.getElementById('confirmation-modal');
        const msg = document.getElementById('confirmation-message');

        if (status === 'success') {
            msg.textContent = 'Your appointment has been booked successfully! Please check your email for updates.';
            msg.style.color = 'green';
        } else {
            msg.textContent = 'Booking failed. Please try again.';
            msg.style.color = 'red';
        }
        modal.showModal();
    <?php endif; ?>

    // Get modal and cancel button
    const bookModal = document.getElementById("bookmodal");
    const cancelButton = document.getElementById("cancel-button");

    // Get all book buttons
    const bookButtons = document.querySelectorAll(".book-btn");

    // Handle Book button clicks
    bookButtons.forEach(button => {
        button.addEventListener("click", () => {
            if (isLoggedIn) {
                const serviceName = button.dataset.service;
                const serviceId = button.dataset.serviceId;

                // sets the modal title dynamically
                modalTitle.textContent = `${serviceName}`;

                //sets a variable to be return in the form for appointments
                document.getElementById("selected-service-id").value = serviceId;
                document.getElementById("selected-service-name").value = serviceName;

                bookModal.showModal(); // Open modal if logged in
            } else {
                alert("Please log in to book an appointment.");
            }
        });
    });

    document.getElementById("date").addEventListener("change", function () {
        const selectedDate = this.value; // Get the selected date
        const timeSelect = document.getElementById("time"); // Get the time dropdown
        const fullyBookedMessage = document.createElement("p"); // Create a message element
        fullyBookedMessage.id = "fully-booked-message"; // Add an ID for easy reference
        fullyBookedMessage.style.color = "red"; // Style the message
        fullyBookedMessage.textContent = "This date is fully booked. Please select another date.";

        // Remove any existing fully booked message
        const existingMessage = document.getElementById("fully-booked-message");
        if (existingMessage) {
            existingMessage.remove();
        }

        // Clear any previously disabled options
        Array.from(timeSelect.options).forEach(option => {
            option.disabled = false; // Reset all options to enabled
        });

        // Fetch booked times for the selected date
        fetch(`<?= baseurl() ?>/pages/getBookedTimes?date=${selectedDate}`)
            .then(response => response.json())
            .then(bookedTimes => {
                // Disable options that are already booked
                bookedTimes.forEach(bookedTime => {
                    const optionToDisable = Array.from(timeSelect.options).find(option => option.value === bookedTime);
                    if (optionToDisable) {
                        optionToDisable.disabled = true; // Disable the booked time slot
                    }
                });

                // Check if all options are disabled
                const allDisabled = Array.from(timeSelect.options).every(option => option.disabled);
                if (allDisabled) {
                    // Append the fully booked message to the modal
                    const modalForm = document.getElementById("book-appointment-form");
                    modalForm.appendChild(fullyBookedMessage);
                }
            })
            .catch(error => console.error("Error fetching booked times:", error));
    });

    // Handle Cancel button inside modal
    cancelButton.addEventListener("click", () => {
        bookModal.close(); // Close modal on cancel
    });


    // Initial state
    updateNavVisibility();
</script>

